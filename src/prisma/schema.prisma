generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String     @unique
    password String
    role     UserStatus @default(USER)
    verificated DateTime

    provider   String?
    providerId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    cart             Cart?
    orders           Order[]
    verificationCode VerificationCode?
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id Int @id @default(autoincrement())

    name     String
    imageUrl String

    Category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    ingredient Ingredient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    variants Variants[]

    cartItems CartItem[]
}

model Variants {
    id Int @id @default(autoincrement())

    price     Int
    size      Int?
    pizzaType Int?

    product   Product @relation(fields: [productID], references: [id])
    productID Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Ingredient {
    id Int @id @default(autoincrement())

    name     String
    price    Int
    imageUrl String

    products Product[]

    cartItems CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id Int @id @default(autoincrement())

    cartItems CartItem[]

    totalPrice Int @default(0)

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    token String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id          Int     @id @default(autoincrement())
    productItem Product @relation(fields: [productId], references: [id])
    productId   Int

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    quantity Int

    ingredients Ingredient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    token String

    totalPrice Int         @default(0)
    status     OrderStatus
    paymentId  String?

    items Json

    fullName String
    adress   String
    email    String
    phone    String
    comment  String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}



model VerificationCode {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    code String

    createdAt DateTime @default(now())

    @@unique([userId, code])
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

enum UserStatus {
    USER
    ADMIN
}
